import os
from yacs.config import CfgNode as CN


#General Configurations
_C = CN()
_C.PROJECTS_ROOT_PATH = 'projects'
_C.PROJECT_NAME = 'handPose'
_C.EXPERIMENT_NAME = "Combined_Run1"
_C.NUM_GPUS = 1
_C.GPU_IDS = None
_C.DATALOADER_NUM_WORKERS = 2
_C.USE_MIXED_PRECISION = True


#Dataset Configurations
_C.DATASET = CN()
_C.DATASET.DATASET_DIR = '/home/trackingsetup/Documents/Vortex_modified/datasets/handPoseCombined'
_C.DATASET.TRAIN_SET = 'train'
_C.DATASET.VAL_SET = 'val'
_C.DATASET.MEAN = [0.485, 0.456, 0.406]
_C.DATASET.STD = [0.229, 0.224, 0.225]
_C.DATASET.OBJ_LIST = None


#EfficientDet Cropping Network Configuration
_C.EFFICIENTDET = CN()
_C.EFFICIENTDET.COMPOUND_COEF = 0
_C.EFFICIENTDET.IMG_SIZE = 256
_C.EFFICIENTDET.BATCH_SIZE = 16
_C.EFFICIENTDET.OPTIMIZER = 'adamw'
_C.EFFICIENTDET.LEARNING_RATE = 0.001
_C.EFFICIENTDET.CHECKPOINT_SAVE_INTERVAL = 10
_C.EFFICIENTDET.ONLY_SAVE_ON_IMPROVEMENT = False    #TODO: actually implement
_C.EFFICIENTDET.VAL_INTERVAL = 1
_C.EFFICIENTDET.USE_EARLY_STOPPING = False
_C.EFFICIENTDET.EARLY_STOPPING_MIN_DELTA = 0.002
_C.EFFICIENTDET.EARLY_STOPPING_PATIENCE = 5
_C.EFFICIENTDET.ANCHOR_SCALES = '[2 ** 0, 2 ** (1.0 / 3.0), 2 ** (2.0 / 3.0)]'
_C.EFFICIENTDET.ANCHOR_RATIOS = '[(1.0, 1.0), (1.4, 0.7), (0.7, 1.4)]'

_C.EFFICIENTDET.AUGMENTATION = CN()
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION = CN()
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.ENABLED = True
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_BLUR = CN()
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_BLUR.PROBABILITY = 0.5
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_BLUR.SIGMA = [0,0.5]
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_NOISE = CN()
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_NOISE.PER_CHANNEL_PROBABILITY = 0.6
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_NOISE.SCALE = [0.0, 0.02]
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.LINEAR_CONTRAST = CN()
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.LINEAR_CONTRAST.PROBABILITY = 1.0
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.LINEAR_CONTRAST.SCALE = [0.7,1.0]
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.MULTIPLY = CN()
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.MULTIPLY.PROBABILITY = 0.3
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.MULTIPLY.SCALE = [0.7,1.5]
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY = CN()
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY.PROBABILITY = 0.3
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY.PER_CHANNEL_PROBABILITY = 0.3
_C.EFFICIENTDET.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY.SCALE = [0.8,1.2]
_C.EFFICIENTDET.AUGMENTATION.MIRROR = CN()
_C.EFFICIENTDET.AUGMENTATION.MIRROR.PROBABILITY = 0.5
_C.EFFICIENTDET.AUGMENTATION.AFFINE_TRANSFORM = CN()
_C.EFFICIENTDET.AUGMENTATION.AFFINE_TRANSFORM.PROBABILITY = 1.0
_C.EFFICIENTDET.AUGMENTATION.AFFINE_TRANSFORM.ROTATION_RANGE = [-60,60]
_C.EFFICIENTDET.AUGMENTATION.AFFINE_TRANSFORM.SCALE_RANGE = [0.8, 1.25]



#EFFICIENTTRACK Cropping Network Configuration
_C.EFFICIENTTRACK = CN()
_C.EFFICIENTTRACK.COMPOUND_COEF = 3
_C.EFFICIENTTRACK.NUM_JOINTS = 23
_C.EFFICIENTTRACK.IMG_SIZE = 320
_C.EFFICIENTTRACK.BOUNDING_BOX_SIZE = 320
_C.EFFICIENTTRACK.BATCH_SIZE = 8
_C.EFFICIENTTRACK.OPTIMIZER = 'adamw'
_C.EFFICIENTTRACK.LEARNING_RATE = 0.001
_C.EFFICIENTTRACK.CHECKPOINT_SAVE_INTERVAL = 10
_C.EFFICIENTTRACK.ONLY_SAVE_ON_IMPROVEMENT = False    #TODO: actually implement
_C.EFFICIENTTRACK.VAL_INTERVAL = 1
_C.EFFICIENTTRACK.USE_EARLY_STOPPING = False
_C.EFFICIENTTRACK.EARLY_STOPPING_MIN_DELTA = 0.002
_C.EFFICIENTTRACK.EARLY_STOPPING_PATIENCE = 5

_C.EFFICIENTTRACK.AUGMENTATION = CN()
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION = CN()
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.ENABLED = True
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_BLUR = CN()
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_BLUR.PROBABILITY = 0.5
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_BLUR.SIGMA = [0,0.5]
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_NOISE = CN()
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_NOISE.PER_CHANNEL_PROBABILITY = 0.6
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.GAUSSIAN_NOISE.SCALE = [0.0, 0.02]
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.LINEAR_CONTRAST = CN()
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.LINEAR_CONTRAST.PROBABILITY = 1.0
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.LINEAR_CONTRAST.SCALE = [0.7,1.0]
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.MULTIPLY = CN()
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.MULTIPLY.PROBABILITY = 0.3
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.MULTIPLY.SCALE = [0.7,1.5]
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY = CN()
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY.PROBABILITY = 0.3
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY.PER_CHANNEL_PROBABILITY = 0.3
_C.EFFICIENTTRACK.AUGMENTATION.COLOR_MANIPULATION.PER_CHANNEL_MULTIPLY.SCALE = [0.8,1.2]
_C.EFFICIENTTRACK.AUGMENTATION.MIRROR = CN()
_C.EFFICIENTTRACK.AUGMENTATION.MIRROR.PROBABILITY = 0.5
_C.EFFICIENTTRACK.AUGMENTATION.AFFINE_TRANSFORM = CN()
_C.EFFICIENTTRACK.AUGMENTATION.AFFINE_TRANSFORM.PROBABILITY = 1.0
_C.EFFICIENTTRACK.AUGMENTATION.AFFINE_TRANSFORM.ROTATION_RANGE = [-60,60]
_C.EFFICIENTTRACK.AUGMENTATION.AFFINE_TRANSFORM.SCALE_RANGE = [0.8, 1.25]





def update_config(cfg, cfg_filename):
    cfg.defrost()
    cfg.merge_from_file(cfg_filename)

    if not isinstance(cfg.LOSS.WITH_HEATMAPS_LOSS, (list, tuple)):
        cfg.LOSS.WITH_HEATMAPS_LOSS = (cfg.LOSS.WITH_HEATMAPS_LOSS)

    if not isinstance(cfg.LOSS.HEATMAPS_LOSS_FACTOR, (list, tuple)):
        cfg.LOSS.HEATMAPS_LOSS_FACTOR = (cfg.LOSS.HEATMAPS_LOSS_FACTOR)

    if not isinstance(cfg.LOSS.WITH_AE_LOSS, (list, tuple)):
        cfg.LOSS.WITH_AE_LOSS = (cfg.LOSS.WITH_AE_LOSS)

    if not isinstance(cfg.LOSS.PUSH_LOSS_FACTOR, (list, tuple)):
        cfg.LOSS.PUSH_LOSS_FACTOR = (cfg.LOSS.PUSH_LOSS_FACTOR)

    if not isinstance(cfg.LOSS.PULL_LOSS_FACTOR, (list, tuple)):
        cfg.LOSS.PULL_LOSS_FACTOR = (cfg.LOSS.PULL_LOSS_FACTOR)

    cfg.freeze()


def check_config(cfg):
    assert cfg.LOSS.NUM_STAGES == len(cfg.LOSS.WITH_HEATMAPS_LOSS), \
        'LOSS.NUM_SCALE should be the same as the length of LOSS.WITH_HEATMAPS_LOSS'
    assert cfg.LOSS.NUM_STAGES == len(cfg.LOSS.HEATMAPS_LOSS_FACTOR), \
        'LOSS.NUM_SCALE should be the same as the length of LOSS.HEATMAPS_LOSS_FACTOR'
    assert cfg.LOSS.NUM_STAGES == len(cfg.LOSS.WITH_AE_LOSS), \
        'LOSS.NUM_SCALE should be the same as the length of LOSS.WITH_AE_LOSS'
    assert cfg.LOSS.NUM_STAGES == len(cfg.LOSS.PUSH_LOSS_FACTOR), \
        'LOSS.NUM_SCALE should be the same as the length of LOSS.PUSH_LOSS_FACTOR'
    assert cfg.LOSS.NUM_STAGES == len(cfg.LOSS.PULL_LOSS_FACTOR), \
        'LOSS.NUM_SCALE should be the same as the length of LOSS.PULL_LOSS_FACTOR'


if __name__ == '__main__':
    import sys
    with open(sys.argv[1], 'w') as f:
        print(_C, file=f)
